import os, sys, uuid, random
from os import system as sm
from sys import platform as pf

try:
    import requests, bs4, rich
    import httpx
    from rich import print as rp
    from rich.panel import Panel as pan
except ModuleNotFoundError:
    sm('python -m pip install requests bs4 rich')

# Colors
R = "[bold red]"
G = "[bold green]"
Y = "[bold yellow]"
B = "[bold blue]"
M = "[bold magenta]"
P = "[bold violet]"
C = "[bold cyan]"
W = "[bold white]"
r = "\033[1;31m"
g = "\033[1;32m"
y = "\033[1;33m"
b = "\033[1;34m"
m = "\033[1;35m"
c = "\033[1;36m"
w = "\033[1;37m"

# Random Color
def randc():
    return random.choice([R, G, Y, B, M, P, C, W])

# Logo
def logo():
    rp(pan("""%s                     ######   ######
                    ##    ## ##    ##
                    ##       ##    
                    ##       ##    
                    ##       ##
                    ##       ##   ####
                    ##       ##    ##
                    ##    ## ##    ##
                     ######   ######""" % (randc()), title="%sCOOKIE GETTER" % (Y), subtitle="%sDEVELOP BY PABLO" % (R), border_style="bold purple"))

# Clear Screen
def clear():
    if pf in ['win32', 'win64']:
        sm('cls')
    else:
        sm('clear')
    logo()

# Main Function
def main():
    clear()
    try:
        user = input("%s(USER ID/EMAIL):~ " % (c))
        passw = input("%s(PASSWORD):~ " % (c))
    except (KeyboardInterrupt, EOFError):
        rp("%sInput Error Detected, Restarting..." % (R))
        os.system("sleep 2")
        main()
    clear()
    cuser(user, passw)

# Cookie Getter via Graph
def cuser(user, passw):
    accessToken = '350685531728|62f8ce9f74b12f84c123cc23437a4a32'
    data = {
        'adid': str(uuid.uuid4()),
        'format': 'json',
        'device_id': str(uuid.uuid4()),
        'cpl': 'true',
        'family_device_id': str(uuid.uuid4()),
        'credentials_type': 'device_based_login_password',
        'error_detail_type': 'button_with_disabled',
        'source': 'device_based_login',
        'email': user,
        'password': passw,
        'access_token': accessToken,
        'generate_session_cookies': '1',
        'meta_inf_fbmeta': '',
        'advertiser_id': str(uuid.uuid4()),
        'currently_logged_in_userid': '0',
        'locale': 'en_US',
        'client_country_code': 'US',
        'method': 'auth.login',
        'fb_api_req_friendly_name': 'authenticate',
        'fb_api_caller_class': 'com.facebook.account.login.protocol.Fb4aAuthHandler',
        'api_key': '62f8ce9f74b12f84c123cc23437a4a32'
    }
    headers = {
        'User-Agent': "[FBAN/FB4A;FBAV/196.0.0.29.99;FBPN/com.facebook.katana;FBLC/en_US;FBBV/135374479;FBCR/SMART;FBMF/samsung;FBBD/samsung;FBDV/SM-A720F;FBSV/8.0.0;FBCA/armeabi-v7a:armeabi;FBDM={density=3.0,width=1080,height=1920};FB_FW/1;]",
        'Content-Type': 'application/x-www-form-urlencoded',
        'Host': 'graph.facebook.com',
        'X-FB-Net-HNI': str(random.randint(10000, 99999)),
        'X-FB-SIM-HNI': str(random.randint(10000, 99999)),
        'X-FB-Connection-Type': 'MOBILE.LTE',
        'X-Tigon-Is-Retry': 'False',
        'x-fb-session-id': 'nid=jiZ+yNNBgbwC;pid=Main;tid=132;nc=1;fc=0;bc=0;cid=62f8ce9f74b12f84c123cc23437a4a32',
        'x-fb-device-group': str(random.randint(1000, 9999)),
        'X-FB-Friendly-Name': 'ViewerReactionsMutation',
        'X-FB-Request-Analytics-Tags': 'graphservice',
        'X-FB-HTTP-Engine': 'Liger',
        'X-FB-Client-IP': 'True',
        'X-FB-Connection-Bandwidth': str(random.randint(20000000, 30000000)),
        'X-FB-Server-Cluster': 'True',
        'x-fb-connection-token': '62f8ce9f74b12f84c123cc23437a4a32'
    }
    pos = httpx.post("https://b-graph.facebook.com/auth/login", headers=headers, data=data, follow_redirects=False).json()
    if "session_key" in pos:
        clear()
        rp(pos)
        print("%sUSER ID/EMAIL: %s%s\n%s\n%sPASSWORD: %s%s\n%s\n%sCOOKIE: %s%s\n%s\n%sACCESS_TOKEN: %s%s" % (
            g, c, user, "\033[1;32m=" * os.get_terminal_size().columns,
            g, c, passw, "\033[1;32m=" * os.get_terminal_size().columns,
            g, c, f"sb={''.join(random.choices(string.ascii_letters+string.digits+'_', k=24))};" + ';'.join(i['name']+'='+i['value'] for i in pos['session_cookies']),
            "\033[1;32m=" * os.get_terminal_size().columns,
            g, c, pos['access_token']
        ))
        input("\nPress Enter To Restart")
        main()
    else:
        rp(pos)
        print("%sINVALID/CHECKPOINT" % (r))
        input("\033[1;36mPress Enter To Try Again")
        main()

# Run
main()
